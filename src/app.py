import streamlit as st
import openai
from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
from datetime import datetime
import json
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY', "")

def create_startup_analysis_doc(analysis_content, metrics):
    """Create a professionally formatted Word document with the startup analysis"""
    doc = Document()
    
    # Title
    title = doc.add_heading('Startup Evaluation Analysis Report', level=1)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add date
    date_paragraph = doc.add_paragraph()
    date_run = date_paragraph.add_run(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    date_run.font.size = Pt(10)
    date_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    
    # Executive Summary
    doc.add_heading('Executive Summary', level=2)
    doc.add_paragraph(analysis_content.get('executive_summary', 'No executive summary provided'))
    
    # Metrics Analysis
    doc.add_heading('Key Metrics Analysis', level=2)
    for metric, value in metrics.items():
        p = doc.add_paragraph()
        p.add_run(f"{metric}: ").bold = True
        p.add_run(str(value))
    
    # Detailed Analysis
    doc.add_heading('Detailed Analysis', level=2)
    doc.add_paragraph(analysis_content.get('detailed_analysis', 'No detailed analysis provided'))
    
    # Recommendations
    doc.add_heading('Recommendations', level=2)
    doc.add_paragraph(analysis_content.get('recommendations', 'No recommendations provided'))
    
    # Risk Assessment
    doc.add_heading('Risk Assessment', level=2)
    doc.add_paragraph(analysis_content.get('risk_assessment', 'No risk assessment provided'))
    
    # Footer
    footer = doc.sections[0].footer
    footer_para = footer.paragraphs[0]
    footer_para.text = "Generated by AI Startup Analyst | Confidential"
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Save to BytesIO
    doc_io = io.BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)
    return doc_io

def analyze_startup(startup_info):
    """Analyze startup using GPT-4"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4",  # Changed from gpt-4o to gpt-4
            messages=[
                {
                    "role": "system",
                    "content": """You are an expert startup analyst. Provide analysis in the following JSON format:
                    {
                        "executive_summary": "Brief overview of the startup's potential",
                        "detailed_analysis": "In-depth analysis of business model, market, and team",
                        "recommendations": "Specific actionable recommendations",
                        "risk_assessment": "Key risks and mitigation strategies"
                    }"""
                },
                {
                    "role": "user",
                    "content": startup_info
                }
            ],
            temperature=0.7,
            max_tokens=1500
        )
        
        # Get the response content
        content = response.choices[0].message.content
        
        # Try to parse as JSON
        try:
            return json.loads(content)
        except json.JSONDecodeError:
            # If JSON parsing fails, create a structured response
            st.warning("AI response wasn't in JSON format. Structuring response...")
            return {
                "executive_summary": "Analysis Summary:\n" + content[:500],
                "detailed_analysis": "Detailed Review:\n" + content[500:1000],
                "recommendations": "Key Recommendations:\n" + content[1000:1500],
                "risk_assessment": "Risk Analysis:\n" + content[1500:]
            }
            
    except Exception as e:
        st.error(f"Error in analysis: {str(e)}")
        return None

def main():
    st.title("ðŸš€ AI Startup Analyst")
    st.subheader("Intelligent Startup Evaluation System")
    
    # Startup Information Form
    with st.form("startup_info_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            startup_name = st.text_input("Startup Name", value="TechHealth AI")
            industry = st.selectbox("Industry", [
                "SaaS", "FinTech", "HealthTech", "E-commerce", 
                "AI/ML", "CleanTech", "EdTech", "Other"
            ], index=2)
            funding_stage = st.selectbox("Funding Stage", [
                "Pre-seed", "Seed", "Series A", "Series B", "Series C+"
            ], index=2)
        
        with col2:
            funding_amount = st.number_input("Funding Amount ($)", min_value=0, value=5000000)
            team_size = st.number_input("Team Size", min_value=1, value=15)
            revenue = st.number_input("Monthly Revenue ($)", min_value=0, value=180000)
        
        # Metrics
        st.subheader("Key Metrics")
        col3, col4, col5 = st.columns(3)
        
        with col3:
            mrr = st.number_input("Monthly Recurring Revenue ($)", min_value=0, value=150000)
            burn_rate = st.number_input("Monthly Burn Rate ($)", min_value=0, value=120000)
        
        with col4:
            cac = st.number_input("Customer Acquisition Cost ($)", min_value=0, value=500)
            ltv = st.number_input("Customer Lifetime Value ($)", min_value=0, value=2500)
        
        with col5:
            growth_rate = st.number_input("Monthly Growth Rate (%)", min_value=0.0, value=15.5)
            runway = st.number_input("Runway (months)", min_value=0, value=18)
        
        # Additional Information
        business_model = st.text_area("Business Model Description", value="""TechHealth AI provides AI-powered remote patient monitoring solutions to hospitals and healthcare providers. Our SaaS platform uses machine learning to analyze patient vitals and predict potential health issues before they become critical.""")
        
        market_size = st.text_area("Target Market Size & Opportunity", value="""The global remote patient monitoring market size is $117.1 billion, growing at 19.5% CAGR. Our target market includes 6,090 hospitals in the US and 230,000 physician practices.""")
        
        competitive_advantage = st.text_area("Competitive Advantage", value="""1. Proprietary AI algorithms with 95% accuracy in early detection
2. FDA-cleared medical device status
3. Integration with 40+ EMR systems
4. HIPAA, GDPR, and SOC 2 Type II compliant""")
        
        submitted = st.form_submit_button("Analyze Startup")
    
    if submitted:
        if not startup_name or not business_model:
            st.warning("Please fill in at least the startup name and business model.")
            return
        
        # Check for OpenAI API key
        if not openai.api_key:
            st.error("Please set your OpenAI API key in the environment variables (OPENAI_API_KEY)")
            return
            
        # Prepare analysis input
        startup_info = f"""
        Startup Name: {startup_name}
        Industry: {industry}
        Funding Stage: {funding_stage}
        Funding Amount: ${funding_amount:,}
        Team Size: {team_size}
        Monthly Revenue: ${revenue:,}
        
        Key Metrics:
        - MRR: ${mrr:,}
        - Burn Rate: ${burn_rate:,}
        - CAC: ${cac:,}
        - LTV: ${ltv:,}
        - Growth Rate: {growth_rate}%
        - Runway: {runway} months
        
        Business Model: {business_model}
        Market Size: {market_size}
        Competitive Advantage: {competitive_advantage}
        """
        
        with st.spinner("Analyzing startup data..."):
            analysis = analyze_startup(startup_info)
            
            if analysis:
                st.success("Analysis completed successfully!")
                
                # Display Analysis
                st.subheader("Executive Summary")
                st.write(analysis['executive_summary'])
                
                with st.expander("View Detailed Analysis"):
                    st.write(analysis['detailed_analysis'])
                
                with st.expander("View Recommendations"):
                    st.write(analysis['recommendations'])
                
                with st.expander("View Risk Assessment"):
                    st.write(analysis['risk_assessment'])
                
                # Prepare metrics for document
                metrics = {
                    "Monthly Recurring Revenue": f"${mrr:,}",
                    "Burn Rate": f"${burn_rate:,}",
                    "CAC": f"${cac:,}",
                    "LTV": f"${ltv:,}",
                    "Growth Rate": f"{growth_rate}%",
                    "Runway": f"{runway} months"
                }
                
                # Create and offer document download
                doc_io = create_startup_analysis_doc(analysis, metrics)
                st.download_button(
                    label="ðŸ“¥ Download Full Analysis Report",
                    data=doc_io,
                    file_name=f"{startup_name.lower().replace(' ', '_')}_analysis.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )

if __name__ == "__main__":
    main()